from io import StringIO
from datetime import datetime
from urllib.parse import urlparse

import requests

from aiogram import types
from aiogram.dispatcher.filters import CommandHelp, CommandStart, Text

from .. import dp, bot, db
from ..config import URL_SPLITTER

from ..util import open_recursive
from ..util.telegram import answer_parsed, build_menu


@dp.message_handler(CommandStart())
async def user_start(msg):
	url = msg.get_args()

	if url:
		req = requests.get(url)
		await answer_parsed(msg, req.content)
	else:
		await msg.answer(
			"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
			–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.html) –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
			–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start <URL>
			/help - –∫–æ–º–∞–Ω–¥—ã
			""")


@dp.message_handler(CommandHelp())
async def user_start(msg):
	await msg.answer(
	"""üìú *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥*
	/start *<URL>* - –ø–∞—Ä—Å–∏—Ç HTML —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞
	/blacklist - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
	/blacklist_add - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
	/blacklist_remove - —É–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	/replace_url *<URL>* *<URL>* - –∑–∞–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥—É—é –≤ HTML
	/download_file - —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª

	–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ *.html* —Ñ–∞–π–ª–∞ –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
	*<URL>* –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ *http(s)://...*
	""", parse_mode = "markdown"
	)


@dp.message_handler(content_types = types.message.ContentType.DOCUMENT)
async def func(msg):
	doc = msg.document

	if doc.file_name.endswith(".html"):
		file = await bot.get_file(doc.file_id)
		text = await bot.download_file(file.file_path)

		await answer_parsed(msg, str(text.getvalue()))
	else:
		await msg.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º *.html*", parse_mode = "markdown")


@dp.message_handler(commands = ["blacklist"])
async def open_blacklist(msg):
	blacklist = await db.get_blacklist(msg.chat.id)
	menu = build_menu("blacklist", 0, "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ‚ùå", list(blacklist))

	await msg.answer(**menu, parse_mode = "markdown")


@dp.message_handler(commands = ["blacklist_add", "blacklist_remove"])
async def add_rem_url(msg):
	urls = msg.get_args().split(" ")
	_id = msg.chat.id

	parsed_url = urlparse(urls[0])

	if not parsed_url.scheme or not parsed_url.netloc:
		await msg.answer("–û—à–∏–±–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ ‚ùå")
		return

	if "add" in msg.text:
		added = await db.add_black_url(_id, urls[0])
		await msg.answer(
			added != 1 and "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚ùå" or "–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚úÖ"
		)
	else:
		removed = await db.rem_black_url(_id, urls[0])
		await msg.answer(
			removed != 1 and "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞) ‚ùå" or "–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚úÖ"
		)


@dp.message_handler(commands = ["replace_url"])
async def replace_url(msg):
	urls = msg.get_args().split(" ")
	_id = msg.chat.id

	parsed_url = urlparse(urls[0])

	if len(urls) < 2 or not parsed_url.scheme or not parsed_url.netloc:
		await msg.answer("–û—à–∏–±–∫–∞ ‚ùå\n –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /replace_url <url1> <url2>")
		return

	try:
		with open_recursive(f"userdata/d{msg.chat.id}/all_links.txt", "r") as f:
			found = f.read().split("\n")
			count = 0

			for a in range(len(found)):
				val = found[a]

				if len(val.split(URL_SPLITTER)) > 1:
					continue

				if val.startswith(urls[0]) and urlparse(val).netloc == parsed_url.netloc:
					found[a] = f"{val}{URL_SPLITTER}{urls[1]}"
					count += 1

			await msg.answer(
				count < 1 and f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {urls[0]} –≤ HTML ‚ùå" or f"–£—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ {count} ‚úÖ"
			)

			with open_recursive(f"userdata/d{msg.chat.id}/all_links.txt", "w+") as f:
				f.write("\n".join(found))
	except FileNotFoundError:
		await msg.answer(text = "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ (/help)")


@dp.message_handler(commands = ["download_file"])
async def download_result(msg):
	new_msg = await msg.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...")
	
	try:
		with open_recursive(f"userdata/d{msg.chat.id}/file.txt", "r") as fin:
			data = fin.read()

			with open_recursive(f"userdata/d{msg.chat.id}/all_links.txt", "r") as frep:
				links = sorted(frep.read().split("\n"), key = len, reverse = True)

				for u in links:
					sp = u.split(URL_SPLITTER)

					if len(sp) > 1:
						data = data.replace(sp[0], sp[1], 1)
					
		with open_recursive(f"userdata/d{msg.chat.id}/file.txt", "w+") as fout:
			fout.write(data)
		
		b_data = StringIO()
		b_data.write(data)
		b_data.seek(0)

		cur_time = datetime.now().strftime("%d_%m_%Y_%H%M%S")

		await msg.answer_document(
			types.InputFile(b_data, filename = f"result{cur_time}.html"),
			caption = u"–§–∞–π–ª –≥–æ—Ç–æ–≤ ‚úÖ"
		)
		await new_msg.delete()
	except FileNotFoundError:
		await new_msg.edit_text(text = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")